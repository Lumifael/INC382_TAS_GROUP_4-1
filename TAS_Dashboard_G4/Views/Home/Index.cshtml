@{
    ViewBag.Title = "Home Page";
}

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title> Assignment 1 - Dashboard</title>
    <meta charset="utf-8" />
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/highcharts-more.js"></script>
    <script src="https://code.highcharts.com/modules/series-label.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/solid-gauge.js"></script>

    <style type="text/css">
        #container {
            min-width: 310px;
            max-width: 800px;
            height: 400px;
            margin: 0 auto
        }

        #container1 {
            min-width: 310px;
            max-width: 800px;
            height: 400px;
            margin: 0 auto
        }

        #container2 {
            min-width: 310px;
            height: 400px;
            max-width: 600px;
            margin: 0 auto
        }

        .outer {
            width: 600px;
            height: 200px;
            margin: 0 auto;
        }

            .outer .chart-container {
                width: 300px;
                float: left;
                height: 200px;
            }

        .highcharts-yaxis-grid .highcharts-grid-line {
            display: none;
        }
    </style>


</head>
<body>
    <div id="container"></div>
    <div id="container1"></div>
    <div id="container2"></div>
    <div id="container3"></div>

    <div class="outer">
        <div id="container-speed" class="chart-container"></div>
        <div id="container-rpm" class="chart-container"></div>
    </div>



    <script type="text/javascript">

    var production_id = @Html.Raw(Json.Encode(@ViewBag.productionid));
    var yield = @Html.Raw(Json.Encode(@ViewBag.yield));
    // TO DO : Capacity, Loss, Reject, OEE
    var capacity = @Html.Raw(Json.Encode(@ViewBag.capacity));
    var loss = @Html.Raw(Json.Encode(@ViewBag.loss));
    var reject = @Html.Raw(Json.Encode(@ViewBag.reject));
    var oee = @Html.Raw(Json.Encode(@ViewBag.oee));

    var avg_oee = 0;



    var data = [];  // Yield
    // TO DO : Capacity, Loss, Reject, OEE
    var data_capacity = []; // Capacity
    var data_loss = []; // Loss
    var data_reject = []; // Reject
    var data_oee = []; // OEE

    // Yield
    for (i = 0; i < production_id.length; i++)
            {
                data.push([production_id[i],yield[i]]);
            }

        Highcharts.chart('container', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Yield'
            },
            /*subtitle: {
                text: 'Source: WorldClimate.com'
            },*/
            xAxis: {
                // TO DO - for loop - production id
                categories: [
                    '160234',
                    '160235',
                    '160236',
                    '160237',
                    '160238',
                    '160239',
                    '160240'
                ],
                crosshair: true
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Yield'
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.1f} mm</b></td></tr>',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                }
            },
            series: [{
                name: 'Production ID',
                //for loop data
                data: data

            }]
        });


    // TO DO - Capacity
    for (i = 0; i < production_id.length; i++) {
            data_capacity.push([production_id[i], capacity[i]]);
        }

        Highcharts.chart('container1', {

            title: {
                text: 'Capacity'
            },
            xAxis: {
                title: {
                    text: 'Production ID'
                }
            },
            yAxis: {
                title: {
                    text: 'Capacity'
                }
            },
            legend: {
                layout: 'vertical',
                align: 'right',
                verticalAlign: 'middle'
            },
            plotOptions: {
                series: {
                    label: {
                        connectorAllowed: false
                    },
                }
            },
            series: [{
                name: 'Capacity',
                data: data_capacity
            }],

            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        legend: {
                            layout: 'horizontal',
                            align: 'center',
                            verticalAlign: 'bottom'
                        }
                    }
                }]
            }
        });

    // TO DO - OEE
    for (i = 0; i < production_id.length; i++) {
        data_oee.push([production_id[i], oee[i]]);
        avg_oee = avg_oee + oee[i];
    }

        avg_oee = Math.round(avg_oee / production_id.length);



        var gaugeOptions = {

            chart: {
                type: 'solidgauge'
            },

            title: null,

            pane: {
                center: ['50%', '85%'],
                size: '140%',
                startAngle: -90,
                endAngle: 90,
                background: {
                    backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || '#EEE',
                    innerRadius: '60%',
                    outerRadius: '100%',
                    shape: 'arc'
                }
            },

            tooltip: {
                enabled: false
            },

            // the value axis
            yAxis: {
                stops: [
                    [0.1, '#55BF3B'], // green
                    [0.5, '#DDDF0D'], // yellow
                    [0.9, '#DF5353'] // red
                ],
                lineWidth: 0,
                minorTickInterval: null,
                tickAmount: 2,
                title: {
                    y: -70
                },
                labels: {
                    y: 16
                }
            },

            plotOptions: {
                solidgauge: {
                    dataLabels: {
                        y: 5,
                        borderWidth: 0,
                        useHTML: true
                    }
                }
            }
        };

        // The OEE gauge
        var chartSpeed = Highcharts.chart('container-speed', Highcharts.merge(gaugeOptions, {
            yAxis: {
                min: 0,
                max: 100,
                title: {
                    text: 'OEE'
                }
            },

            credits: {
                enabled: false
            },

            series: [{
                name: 'OEE',
                data: [avg_oee],
                dataLabels: {
                    format: '<div style="text-align:center"><span style="font-size:25px;color:' +
                        ((Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black') + '">{y}</span><br/>' +
                        '<span style="font-size:12px;color:silver">km/h</span></div>'
                },
                tooltip: {
                    valueSuffix: ' km/h'
                }
            }]

        }));



        // Bring life to the dials
        setInterval(function () {
            // Speed
            var point,
                newVal,
                inc;

            if (chartSpeed) {
                point = chartSpeed.series[0].points[0];
                //inc = Math.round((Math.random() - 0.5) * 100);
                newVal = point.y + inc;

                if (newVal < 0 || newVal > 200) {
                    newVal = point.y - inc;
                }

                point.update(newVal);
            }

        }, 2000);

    // TO DO - Reject
        for (i = 0; i < production_id.length; i++) {
            data_reject.push([production_id[i], reject[i]]);
        }

        Highcharts.chart('container2', {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                type: 'pie'
            },
            title: {
                text: 'Reject'
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                        style: {
                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                        }
                    }
                }
            },
            series: [{
                name: 'Brands',
                colorByPoint: true,
                data: [{
                    name: '160234',
                    y: 80,
                    sliced: true,
                    selected: true
                }, {
                        name: '160235',
                        y: 90,
                }, {
                        name: '160236',
                        y: 78,
                }, {
                        name: '160237',
                        y: 89,
                    }, {
                        name: '160238',
                        y: 79,
                    }, {
                        name: '160239',
                        y: 75,
                    }, {
                        name: '160240',
                        y: 60,
                    }



                ]
            }]
        });

        // TO DO - Loss
        for (i = 0; i < production_id.length; i++) {
            data_loss.push([production_id[i], reject[i]]);
        }

        Highcharts.chart('container3', {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                type: 'pie'
            },
            title: {
                text: 'Loss'
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                        style: {
                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                        }
                    }
                }
            },
            series: [{
                name: 'Brands',
                colorByPoint: true,
                data: [{
                    name: '160234',
                    y: 100,
                    sliced: true,
                    selected: true
                }, {
                    name: '160235',
                    y: 96,
                }, {
                    name: '160236',
                    y: 54,
                }, {
                    name: '160237',
                    y: 68,
                }, {
                    name: '160238',
                    y: 89,
                }, {
                    name: '160239',
                    y: 80,
                }, {
                    name: '160240',
                    y: 20,
                }



                ]
            }]
        });

    </script>
</body>
</html>

<div class="jumbotron">
    <h1>ASP.NET</h1>
    <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>
    <p><a href="https://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>

<div class="row">
    <div class="col-md-4">
        <h2>Getting started</h2>
        <p>
            ASP.NET MVC gives you a powerful, patterns-based way to build dynamic websites that
            enables a clean separation of concerns and gives you full control over markup
            for enjoyable, agile development.
        </p>
        <p><a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkId=301865">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Get more libraries</h2>
        <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>
        <p><a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkId=301866">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Web Hosting</h2>
        <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>
        <p><a class="btn btn-default" href="https://go.microsoft.com/fwlink/?LinkId=301867">Learn more &raquo;</a></p>
    </div>
</div>